// Generated by CoffeeScript 1.8.0
(function() {
  var fs, path, phantomjs, script, spawn;

  fs = require('fs');

  spawn = require('child_process').spawn;

  path = require('path');

  phantomjs = require('phantomjs');

  script = path.join(__dirname, 'scripts', 'pdf_a4_portrait.coffee');

  exports.create = function(string, options, callback) {
    var child, content, stderr, stdout, timeout;
    if (arguments.length === 2) {
      callback = options;
      options = {};
    }
    if (!(string != null ? string.length : void 0)) {
      return callback(new Error("html-pdf: Can't create a pdf without content"));
    }
    child = spawn(phantomjs.path, [options.script || script]);
    stdout = [];
    stderr = [];
    timeout = setTimeout(function() {
      child.stdin.end();
      child.kill();
      if (!stderr.length) {
        return stderr = [new Buffer('html-pdf: PDF generation timeout. Phantom.js script did not exit.')];
      }
    }, parseInt(options.timeout) || 30000);
    child.stdout.on('data', function(buffer) {
      return stdout.push(buffer);
    });
    child.stderr.on('data', function(buffer) {
      stderr.push(buffer);
      child.stdin.end();
      return child.kill();
    });
    child.on('exit', function(code) {
      var err, error, file;
      clearTimeout(timeout);
      if ((stderr.length || code) > 0) {
        error = new Error(Buffer.concat(stderr).toString() || 'html-pdf: Unknown Error');
        return callback(error);
      }
      file = Buffer.concat(stdout);
      try {
        file = JSON.parse(file);
      } catch (_error) {
        err = _error;
      }
      return callback(null, file);
    });
    if (options.filename) {
      options.filename = path.resolve(options.filename);
    }
    content = {
      html: string,
      options: options
    };
    return child.stdin.write(JSON.stringify(content) + '\n', 'utf8');
  };

}).call(this);
